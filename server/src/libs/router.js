// @flow

import fs from 'fs';
import path from 'path';
import express from 'express';

import sseServer from './sse';
import logResponseBody from './logResponseBody';


const rootPath = path.join(__dirname, '..', '..', '..');

/**
 * Serve the template of the client.
 */
const client = (config: QXConfig) => (req: Object, res: Object) => {
  let template;

  // in development, inject the script tag that proxy to the QX webpack dev server
  if (config.development) {
    const templatePath = path.join(rootPath, 'client', 'index.html');
    template = fs.readFileSync(templatePath, 'utf8');
    template = template.replace(
      '<div id="app"></div>',
      '<div id="app"></div>\n<script type=text/javascript src="/qx/webpack"></script>',
    );
  // in production, serve the index.html generated by the build process
  } else {
    const templatePath = path.join(rootPath, 'dist', 'client', 'index.html');
    template = fs.readFileSync(templatePath, 'utf8');
  }

  res.setHeader('Content-Type', 'text/html');
  return res.send(template).end();
};

/**
 * QX router.
 * Define routes to the different components.
 */
const qxRouter = (config: QXConfig): Object => {
  const router = express.Router();    // eslint-disable-line new-cap

  // save the start of the request
  router.use((req, res, next) => {
    req.qxStart = Date.now();         // eslint-disable-line no-param-reassign
    next();
  });

  // if development, proxy an endpoint to the live bundle provided by QX's
  // webpack-dev-server
  if (config.development) {
    const proxy = require('http-proxy-middleware');   // eslint-disable-line

    const endpoint = '/qx/webpack';

    router.use(endpoint, proxy({
      target: config.liveBundlePath,
      pathRewrite: { [endpoint]: '' },
    }));
  }

  // serve assets
  const clientAssetsPath = path.join(__dirname, '..', '..', 'dist', 'client', 'static');
  router.use('/qx/static', express.static(clientAssetsPath));

  // send SSE events of data received from the bus
  router.use('/qx/sse', sseServer);

  // intercept the response to emit an event on the bus
  router.use(logResponseBody(config));

  // serve a client webapp plugged to the SSE server to view queries and responses
  router.use('/qx', client(config));

  return router;
};

export default qxRouter;
